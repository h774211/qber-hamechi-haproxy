global
    #debug
    #chroot /var/lib/haproxy
    #user haproxy
    #group haproxy
    #pidfile /var/run/haproxy.pid

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW

    spread-checks 4
    tune.maxrewrite 1024

defaults
    mode    http
    balance roundrobin

    option  dontlognull
    option  dontlog-normal
    option  forwardfor
    option  redispatch

    maxconn 5000
    timeout connect 5s
    timeout client  20s
    timeout server  20s
    timeout queue   30s
    timeout http-request 5s
    timeout http-keep-alive 15s

    #errorfile 400 /etc/haproxy/errors/400.http
    #errorfile 403 /etc/haproxy/errors/403.http
    #errorfile 408 /etc/haproxy/errors/408.http
    #errorfile 500 /etc/haproxy/errors/500.http
    #errorfile 502 /etc/haproxy/errors/502.http
    #errorfile 503 /etc/haproxy/errors/503.http
    #errorfile 504 /etc/haproxy/errors/504.http

    stats enable
    stats refresh 30s
    #stats hide-version
    stats realm Strictly\ Private
    stats auth admin:admin
    stats uri /admin?stats

frontend http-in
    bind *:80
    http-request set-header X-Forwarded-Port %[dst_port]
    default_backend bd_2
    acl is_paste path_beg -i /paste
    acl is_back path_beg -i /back
    use_backend bd_1 if is_paste
    use_backend bd_2 if is_back

#frontend https-in
#    bind *:443
#    http-request set-header X-Forwarded-Port %[dst_port]
#    http-request add-header X-Forwarded-Proto https if { ssl_fc }
#    default_backend bd_2


backend bd_1
    #option httpchk HEAD / HTTP/1.1\r\nHost:localhost
    reqrep ^([^\ :]*)\ /paste/(.*)     \1\ /\2
    server web1 192.168.99.100:30080 check cookie s1
backend bd_2
    reqrep ^([^\ :]*)\ /back/(.*)     \1\ /\2
    server web2 192.168.99.100:30080 check cookie s2
